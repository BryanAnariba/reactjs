{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifts.js","components/GifGrid.js","hooks/UseFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categs","console","log","type","placeholder","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","catch","err","useFetchGif","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNAwCeA,EArCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACDC,mBAAS,IADR,mBAC/BC,EAD+B,KACnBC,EADmB,KAgBvC,OACI,oCACI,6BACI,gEAAuCD,GACvC,0BAAME,SAZG,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAM,OAAKP,GAAL,mBAAmBO,OACxCC,QAAQC,IAAI,gBAAkBT,EAAa,aAC3CC,EAAc,OAQN,2BACIS,KAAK,OACLC,YAAY,uBACZC,MAAQZ,EACRa,SAtBM,SAACV,GAEvBF,EAAcE,EAAEW,OAAOF,cCNlBG,EAAc,SAAC,GAAsB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAErC,OACI,oCACI,yBAAKC,UAAU,2CACX,2BAAKF,GACL,yBAAKG,IAAMF,EAAMG,IAAMJ,O,uBCR1BK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEAGTN,EAHS,iDAGwCO,UAAUF,GAHlD,+DAIIG,MAAMR,GAJV,cAITS,EAJS,gBAKOA,EAAKC,OALZ,uBAKPC,EALO,EAKPA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAZ3B,kBAiBRY,GAjBQ,2HAAH,sDCyBLK,EAtBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECIP,SAACA,GAAc,IAAD,EACTxB,mBAAS,CACjC8B,KAAM,GACNO,SAAS,IAHwB,mBAC7BC,EAD6B,KACtBC,EADsB,KAmBrC,OAbAC,qBAAU,WACNjB,EAAQC,GACPiB,MAAK,SAACC,GACHH,EAAS,CACLT,KAAMY,EACNL,SAAS,OAGhBM,OAAM,SAACC,GACJnC,QAAQC,IAAIkC,QAElB,CAACpB,IAEIc,EDtB2BO,CAAYrB,GAAhCU,EADgB,EACtBJ,KAAcO,EADQ,EACRA,QACtB,OACI,oCACI,4BAAMb,GACN,yBAAKJ,UAAU,aAEXiB,GAAW,+CAGXH,EAAOF,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACIa,IAAMb,EAAIhB,IACLgB,UEYdc,EAzBM,WAAO,IAAD,EAEe/C,mBAClC,CACI,kBAJe,mBAEfgD,EAFe,KAEHjD,EAFG,KAOvB,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAgBA,EAAgBiD,WAAaA,IAC1D,6BACA,4BAEQA,EAAWhB,KAAI,SAACR,GAAD,OACX,kBAAC,EAAD,CACIsB,IAAMtB,EACNA,SAAWA,U,MCfvCyB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.9113d04e.chunk.js","sourcesContent":["import React , { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [ inputValue, setInputValue ] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories( categs => [inputValue,...categs]);\r\n            console.log('Categoria -> ' + inputValue + ' Guardada');    \r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div>\r\n                <h2>Categoria a ingresar al arreglo: { inputValue }</h2>\r\n                <form onSubmit={ handleSubmit }>\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Write a new category\"\r\n                        value={ inputValue }\r\n                        onChange={ handleInputChange }\r\n                    />\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url}) => {\r\n    //console.log({id, url, title});\r\n    return (\r\n        <>\r\n            <div className=\"card animate__animated animate__flipInX\">\r\n                <p>{ title }</p>\r\n                <img src={ url } alt={ title } />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","export const getGifs = async (category) => {\r\n    try {\r\n        // Ponerlo asi tal cual\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=OJbyUiobElf6un1Q6PBRfO5Rsjyew0W2`;\r\n        const resp = await fetch(url);\r\n        const { data }= await resp.json();\r\n        \r\n        // Desestructurando solo lo que necesito\r\n        const gifs = data.map((img) => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n\r\n        // Respuesta anexada al useState\r\n        return gifs;\r\n        //console.log(gifs);\r\n\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n}","import React /*{ useEffect, useState }*/ from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGif } from '../hooks/UseFetchGifs';\r\nconst GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGif(category);\r\n    return (\r\n        <>\r\n            <h2>{ category }</h2>\r\n            <div className=\"card-grid\"> \r\n            {\r\n                loading && <h2>Loading Data...</h2>\r\n            } \r\n            {\r\n                images.map((img) => (\r\n                    <GifGridItem \r\n                        key={ img.id }\r\n                        { ...img }\r\n                    />\r\n                ))\r\n            }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState , useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifts';\r\n\r\n// LO QUE HARA ESTE CUSTON HOOK ES MIENTRAS SE OBTIENE LA DATA DE LA API\r\n// SE PONE EN Loading.. y una vez la data ya viene de la data quita el loading\r\n// Pinta los datos\r\n// USAR EN GIFTGRID\r\nexport const useFetchGif = (category) => {\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then((imgs) => {// cuando tenga exito\r\n            setState({ \r\n                data: imgs, // mando la data\r\n                loading: false // quito el loading\r\n            })\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    },[category]); //en el useEffect los [] indican que no se renderizara lo que este adentro del useEffet ,solo lo hara una vez al cargar el componente\r\n    // si la categoria cambia se volvera a ejecutar el useEffect\r\n    return state;\r\n}\r\n","import React , { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\nconst GifExpertApp = () => {\r\n\r\n    const [ categories, setCategories ] = useState(\r\n        [\r\n            'Goblin Slayer'\r\n        ]);\r\n\r\n    return ( \r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={ setCategories } categories={ categories }/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map((category) => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } \r\n                        /> \r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}